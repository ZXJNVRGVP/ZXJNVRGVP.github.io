<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hanzire&#39;s Blog</title>
  
  <subtitle>人间有味是清欢。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-23T06:47:39.520Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hanzire</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>题解P3941【入阵曲】</title>
    <link href="http://yoursite.com/%E9%A2%98%E8%A7%A3P3941%E3%80%90%E5%85%A5%E9%98%B5%E6%9B%B2%E3%80%91/"/>
    <id>http://yoursite.com/题解P3941【入阵曲】/</id>
    <published>2019-09-23T06:40:13.000Z</published>
    <updated>2019-09-23T06:47:39.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="60分做法：暴力-前缀和"><a href="#60分做法：暴力-前缀和" class="headerlink" title="60分做法：暴力+前缀和"></a>60分做法：暴力+前缀和</h3><p>使用前缀和存储 <code>sum[i][j]</code> 存储<code>(i,j)</code>点作为右下角<code>(1,1)</code>作左上角的矩阵和。可以枚举每个矩阵大小。复杂度$O(n^4)$</p><h3 id="100分做法：找规律-小暴力"><a href="#100分做法：找规律-小暴力" class="headerlink" title="100分做法：找规律+小暴力"></a>100分做法：找规律+小暴力</h3><p>先看样例：</p><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">1</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">1</td><td align="center">2</td></tr></tbody></table><p>我们可以尝试枚举行之间的分割线，<code>(i,j)</code>代i为上界，以j为下界的矩阵。对这样一个矩阵进行压行处理。就是把每一列的数字都加起来，得到：</p><table><thead><tr><th align="center">3</th><th align="center">3</th><th align="center">3</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>这样一个序列。我们用一个数组<code>f</code>存储它的前缀和，再用<code>mod</code>数组存储它模k的数。我们设<code>f[i],f[j]</code>，且<code>i&lt;j</code>。假如，<code>mod[f[i]]==mod[f[j]]</code>那么就代表区间<code>(i,j)</code>的和%k==0。因为<code>mod[f[i]]</code>区间<code>(i,j)</code>没有对余数做出改变。</p><p>所以，我们应该使用一个桶，<code>cnt[i]</code>代表此前模k=i的前缀和个数，再出现一个模k=i的前缀和时，我们先在答案加上<code>cnt[i]</code>再<code>cnt[i]++</code>。时间复杂度：$O(n^3)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="c++">#include &quot;iostream&quot;#include &quot;cstdio&quot;#include &quot;algorithm&quot;#define ll long longusing namespace std;const int N = 405;const int M = 1000005;int n, m, k, a[N][N];ll ans, sum[N][N], mod[M], cnt[M], f[N];inline int get(){    int res = 0, sign = 1;    char c = getchar();    while (c &lt; &#39;0&#39; || c &gt; &#39;9&#39;)    {        if (c == &#39;-&#39;)            sign = -1;        c = getchar();    }    while (c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;)    {        res = res * 10 + c - &#39;0&#39;;        c = getchar();    }    return res * sign;}int main(int argc, char const *argv[]){    n = get(), m = get(), k = get();    for (int i = 1; i &lt;= n; i++)        for (int j = 1; j &lt;= m; j++)        {            a[i][j] = get();            sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + a[i][j];        }    for (int i = 0; i &lt; n; i++)        for (int j = i + 1; j &lt;= n; j++)        {            cnt[0] = 1;            for (int p = 1; p &lt;= m; p++)            {                f[p] = (sum[j][p] - sum[i][p]) % k;                ans += cnt[f[p]];                cnt[f[p]]++;            }            for (int p = 1; p &lt;= m; p++)                cnt[f[p]] = 0;        }    cout &lt;&lt; ans &lt;&lt; endl;    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;h3 id=&quot;60分做法：暴力-前缀和&quot;&gt;&lt;a href=&quot;#60分做法：暴力-前缀和&quot; class=&quot;headerlink&quot; title=&quot;6
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 P1196 【[NOI2002]银河英雄传说】</title>
    <link href="http://yoursite.com/%E9%A2%98%E8%A7%A3%20P1196%20%E3%80%90%5BNOI2002%5D%E9%93%B6%E6%B2%B3%E8%8B%B1%E9%9B%84%E4%BC%A0%E8%AF%B4%E3%80%91/"/>
    <id>http://yoursite.com/题解 P1196 【[NOI2002]银河英雄传说】/</id>
    <published>2019-09-21T06:50:17.000Z</published>
    <updated>2019-09-23T06:44:02.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法：带权并查集"><a href="#算法：带权并查集" class="headerlink" title="算法：带权并查集"></a>算法：带权并查集</h2><p>这道题有两种算法，但主要思想都是并查集，区别在于是否有路径压缩。</p><h4 id="1-不带路径压缩"><a href="#1-不带路径压缩" class="headerlink" title="1. 不带路径压缩"></a>1. 不带路径压缩</h4><p>  此时fa[x]就表示排在第x号战舰前面的那个战舰的编号。集合的“代表”就是最前面的战舰的编号。<br>  让树上每条边带上权值1，这样树上两点之间的距离-1就是二者相隔的战舰数量。<br>  注意，这样写的话在find函数中就不能加上路径压缩的优化。</p><h4 id="2-带路径压缩"><a href="#2-带路径压缩" class="headerlink" title="2.带路径压缩"></a>2.带路径压缩</h4><p>  在考虑路径压缩时，我们应该在建立一个数组d，d[x]记录战舰x与fa[x]之间的边的权值。<br>  我们知道，在路径压缩时，会把x指向此时的树根。我们应该对find函数做一些修改，把d[x]更新为从x到树根的路径上的所有边权之和。</p><pre><code class="cpp">inline int find(int x){    if(x==f[x]) return x;    int root=find(f[x]);    d[x]+=d[f[x]];    return f[x]=root;}</code></pre><p>  当接收到Cxy指令时，分别执行find(x),find(y)完成查询和路径压缩。如果两者的返回值相同，则说明x,y在同一列之中。<br>  那么，d[x]和d[y]都指向了共同的树根，分别表示在x，y之前的战舰数量。二者之差再减1就是x和y之间间隔的战舰数量。<br>  当接收到Mxy指令时，把x的树根作为y的树根的子节点，连接的新边的权值应给设为合并之前集合y的大小。（因为y集合全部排在x之前）<br>  因此还需要增加一个size数组记录每个集合的大小。</p><pre><code class="cpp">void merge(int x,int y){    x=find(x);y=find(y);    f[x]=y;d[x]=size[y];    size[y]+=size[x];}</code></pre><p>下面是完整代码</p><pre><code class="cpp">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;using namespace std;const int N=30000;int t,f[N+5],d[N+5],size[N+5];inline int find(int x){    if(x==f[x]) return x;    int root=find(f[x]);    d[x]+=d[f[x]];    return f[x]=root;}void merge(int x,int y){    x=find(x);y=find(y);    f[x]=y;d[x]=size[y];    size[y]+=size[x];}int main(){    cin&gt;&gt;t;    char o;int i,j;    for(int i=1;i&lt;=N;i++)    {        f[i]=i;        d[i]=0;        size[i]=1;    }    while(t--)    {        cin&gt;&gt;o&gt;&gt;i&gt;&gt;j;        if(o==&#39;M&#39;) merge(i,j);        if(o==&#39;C&#39;)        {            int x=find(i),y=find(j);            if(x!=y)            {                cout&lt;&lt;&quot;-1&quot;&lt;&lt;endl;                continue;            }            else            {                int q=abs(d[i]-d[j])-1;                cout&lt;&lt;q&lt;&lt;endl;            }        }    }    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法：带权并查集&quot;&gt;&lt;a href=&quot;#算法：带权并查集&quot; class=&quot;headerlink&quot; title=&quot;算法：带权并查集&quot;&gt;&lt;/a&gt;算法：带权并查集&lt;/h2&gt;&lt;p&gt;这道题有两种算法，但主要思想都是并查集，区别在于是否有路径压缩。&lt;/p&gt;
&lt;h4 id=&quot;1
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 luogu P1455 【搭配购买】</title>
    <link href="http://yoursite.com/%E9%A2%98%E8%A7%A3%20P1455%20%E3%80%90%E6%90%AD%E9%85%8D%E8%B4%AD%E4%B9%B0%E3%80%91/"/>
    <id>http://yoursite.com/题解 P1455 【搭配购买】/</id>
    <published>2019-08-26T11:53:49.000Z</published>
    <updated>2019-09-23T06:45:05.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h2><p>​    正解十分简单。所有互相有关联的云可以视作捆绑销售，使用并查集合在一起，得到若干个由原来的物品组成的新物品，最后跑01背包即可。</p><pre><code class="c++">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;const int N=10005;int n,m,w,val[N],wor[N],f[N],fa[N];int p[N],v[N],id[N],tot;bool vis[N];inline int get(){    int res=0;char c=getchar();    while(c&lt;&#39;0&#39;||c&gt;&#39;9&#39;) c=getchar();    while(c&gt;=&#39;0&#39;&amp;&amp;c&lt;=&#39;9&#39;)    {        res=res*10+c-&#39;0&#39;;        c=getchar();    }    return res;}int find(int x){    if(x==fa[x]) return x;    else return fa[x]=find(fa[x]);}int main(){    n=get(),m=get(),w=get();    for(int i=1;i&lt;=n;i++)        wor[i]=get(),val[i]=get();    for(int i=1;i&lt;=n;i++) fa[i]=i;    int x,y,fi;    for(int i=1;i&lt;=m;i++)    {        x=get(),y=get();        int fx=find(x),fy=find(y);        if(fx!=fy) fa[fx]=fy;    }    for(int i=1;i&lt;=n;i++)    {        fi=find(i);        if(!vis[fi])        {            tot++;            id[fi]=tot;            v[tot]+=val[i];            p[tot]+=wor[i];            vis[fi]=true;        }        else        {            v[id[fi]]+=val[i];            p[id[fi]]+=wor[i];        }    }    for(int i=1;i&lt;=tot;i++)        for(int j=w;j&gt;=p[i];j--)            f[j]=max(f[j],f[j-p[i]]+v[i]);    int ans=0;    for(int i=0;i&lt;=w;i++) ans=max(ans,f[i]);    printf(&quot;%d&quot;,ans);    return 0;}</code></pre><h2 id="来个复杂点的解法"><a href="#来个复杂点的解法" class="headerlink" title="来个复杂点的解法"></a>来个复杂点的解法</h2><p>思路：Tarjan缩点+01背包</p><p>我知道并查集就可以惹qwq，但不知为何写了个tarjan</p><p>反正思路很简单，tarjan缩点，缩出来的点就是有关系的点揉在一起的，再在新点上进行01背包。</p><pre><code class="c++">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#define ll long longusing namespace std;const int N=1e4+100;int c[N],d[N],cost[N],val[N];int next[N],head[N],go[N],tot;inline void add(int u,int v){    next[++tot]=head[u];head[u]=tot;go[tot]=v;    next[++tot]=head[v];head[v]=tot;go[tot]=u;}int dfn[N],st[N],low[N],co[N],col,num,top;int Tarjan(int u){    dfn[u]=low[u]=++num;    st[++top]=u;    for(int i=head[u],v;i;i=next[i]){        v=go[i];        if(!dfn[v]){            Tarjan(v);            low[u]=min(low[u],low[v]);        }else if(!co[v]){            low[u]=min(low[u],dfn[v]);        }    }    if(low[u]==dfn[u]){        co[u]=++col;        cost[col]+=c[u];        val[col]+=d[u];        while(st[top]!=u){            cost[col]+=c[st[top]];            val[col]+=d[st[top]];            co[st[top]]=col;            --top;        }        --top;    }}int f[2][N];int main(){    freopen(&quot;buy.in&quot;,&quot;r&quot;,stdin);    freopen(&quot;buy.out&quot;,&quot;w&quot;,stdout);    int n,m,w;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;w;    for(int i=1;i&lt;=n;i++)    scanf(&quot;%d%d&quot;,&amp;c[i],&amp;d[i]);    for(int i=1,u,v;i&lt;=m;i++){        scanf(&quot;%d%d&quot;,&amp;u,&amp;v);        add(u,v);    }    for(int i=1;i&lt;=n;i++)    if(!dfn[i])Tarjan(i);    memset(f,0xcf,sizeof(f));    f[0][0]=0;    for(int i=1;i&lt;=col;i++){        for(int j=0;j&lt;=w;j++)        f[i&amp;1][j]=f[(i-1)&amp;1][j];        for(int j=cost[i];j&lt;=w;j++)        f[i&amp;1][j]=max(f[(i-1)&amp;1][j],f[(i-1)&amp;1][j-cost[i]]+val[i]);    }    int ans=0;    for(int j=0;j&lt;=w;j++)    ans=max(ans,f[col&amp;1][j]);    cout&lt;&lt;ans&lt;&lt;endl;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正解&quot;&gt;&lt;a href=&quot;#正解&quot; class=&quot;headerlink&quot; title=&quot;正解&quot;&gt;&lt;/a&gt;正解&lt;/h2&gt;&lt;p&gt;​    正解十分简单。所有互相有关联的云可以视作捆绑销售，使用并查集合在一起，得到若干个由原来的物品组成的新物品，最后跑01背包即可。&lt;/
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF475B 【Strongly Connected City】</title>
    <link href="http://yoursite.com/%E9%A2%98%E8%A7%A3%20CF475B%20%E3%80%90Strongly%20Connected%20City%E3%80%91/"/>
    <id>http://yoursite.com/题解 CF475B 【Strongly Connected City】/</id>
    <published>2019-08-26T11:18:37.000Z</published>
    <updated>2019-09-23T06:44:13.747Z</updated>
    
    <content type="html"><![CDATA[<p>​    其实只要稍加思考便可以发现一个这张图的一个特性：<strong>只要边缘的四个点是相连通的，整张图就是联通的</strong></p><p>​    根据题意，可以发现，图中的任何一个节点，都可以通过在边缘的四条边中的某个点直接抵达（一溜就到了）。</p><p>​    如果四个顶点相连通，就代表四条边缘的边上的点都可以通过顶点到达，而中间的点只要顺着所处的边的方向走一点可以到边缘，所以所有点都可以到所有点。</p><p>​    相反的，如果有四角上的顶点从相邻的四角上的顶点无法到达，也就意味着所有点都到不了这个顶点（因为只有两条边连着外面）。</p><p>​    因此只要判断四个顶点上的边方向看是否联通即可。</p><pre><code class="c++">#include &lt;iostream&gt;#include &quot;cstdio&quot;#include &quot;cstring&quot;using namespace std;int n, m, din[22], dim[22];bool ans = true;string a, b;int main(int argc, char const *argv[]){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    cin&gt;&gt;a&gt;&gt;b;    for (int i = 0; i &lt; n; i++)        if (a[i]==&#39;&gt;&#39;) din[i+1] = 1;    for (int i = 0; i &lt; m; i++)        if (b[i]==&#39;^&#39;) dim[i+1] = 1;    if (din[1] != dim[1]) ans = false;    if (din[1] == dim[m]) ans = false;    if (din[n] == dim[1]) ans = false;    if (din[n] != dim[m]) ans = false;    if (ans) cout&lt;&lt;&quot;YES&quot;;    else cout&lt;&lt;&quot;NO&quot;;    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    其实只要稍加思考便可以发现一个这张图的一个特性：&lt;strong&gt;只要边缘的四个点是相连通的，整张图就是联通的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    根据题意，可以发现，图中的任何一个节点，都可以通过在边缘的四条边中的某个点直接抵达（一溜就到了）。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>二分图最大匹配</title>
    <link href="http://yoursite.com/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/匈牙利算法/</id>
    <published>2019-07-07T01:59:04.000Z</published>
    <updated>2019-09-23T06:46:40.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ul><li><p><strong>匹配</strong>：任意两条边都没有公共端点的边的集合被称为图的一组匹配。</p></li><li><p><strong>最大匹配</strong>：在二分图中，包含边数最多的一组匹配。</p></li><li><p><strong>匹配边与非匹配边</strong>：对于任意一组匹配S，属于S的边被称为匹配边，不属于S的被称为非匹配边。</p></li><li><p><strong>匹配点与非匹配点</strong>：匹配边的端点被称为匹配点，非匹配边的端点被称为非匹配点。</p></li><li><p><strong>增广路</strong>：连结两个非匹配点的路径，使得非匹配边与匹配边交替出现。</p></li><li><p><strong>完备匹配</strong>:给定一张二分图，其左部、右部端点数量都为N，如果该二分图的最大匹配包含N条匹配边，则称该二分图具有完备匹配。</p><p>接下来我们看几张图来帮助理解。</p><p><img src="https://img.renfei.org/2013/08/2.png" alt></p></li></ul><p>如图2，这是一个二分图。</p><p><img src="https://img.renfei.org/2013/08/3.png" alt></p><p>如图3，所有红色的边就是该二分图的一组<strong>匹配</strong>。很显然，两条红色的边都没有公共端点。</p><p><img src="https://img.renfei.org/2013/08/4.png" alt></p><p>再看图4，此时所有红色的边组成的也是一组匹配，而且是<strong>最大匹配</strong>，甚至还是<strong>完备匹配</strong>。因为匹配边的数量不能再多了，而且匹配边的数量和左右部端点数相同。</p><p><img src="https://img.renfei.org/2013/08/5.png" alt></p><p>如图5，又是一张二分图，红色边的是一组匹配，红色的点就是匹配点了。</p><p><img src="https://img.renfei.org/2013/08/6.png" alt></p><p>如图6，就是图5的一条增广路了，可以看到，第一个端点和最后一个端点都是非匹配点，途中经过的边是非匹配边，匹配边的方式交替的。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>关于二分图匹配的问题，最常见的应该就是求二分图的最大匹配了吧。。。</p><p>举个例子，看这张图：</p><p><img src="https://img.renfei.org/2013/08/0.png" alt></p><p>图中男女可以凑成一对的被连上了边，那我们要尽可能的促成他人的爱情，抽象出来，也就是求二分图最大匹配了。</p><p>（虽然我觉得这样的人际关系很渣，但没办法它是服务于学术的呢。。。）</p><p><img src="https://ae01.alicdn.com/kf/HTB1m7sRXbr1gK0jSZFDq6z9yVXaR.jpg" alt></p><p>为了解决这么一个<del>渣男渣女</del>问题，我们需要用到一个和这个问题一样让人感觉不太舒服的算法（笑。</p><h1 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h1><p><strong>匈牙利算法</strong>，又称<strong>增广路算法</strong>，顾名思义，运用到了增广路的性质，这里就对增广路的一些性质进行补充。</p><h3 id="增广路的性质（建议结合上面增广路的定义看）"><a href="#增广路的性质（建议结合上面增广路的定义看）" class="headerlink" title="增广路的性质（建议结合上面增广路的定义看）"></a>增广路的性质（建议结合上面增广路的定义看）</h3><ul><li>长度为奇数，这是显然的，因为是交替的嘛。</li><li>路径上第奇数号的边是非匹配边，偶数号的是匹配边。</li></ul><p>看到以上性质，你有没有明白些什么？？</p><p>没有，好，那就容我BB两句。<del>有我也要BB</del></p><p>如果我们把增广路上的每条边状态取反，就能得到一个新匹配S’，而且比原来的匹配S大了1！</p><p>进一步我们可以得到推论：</p><p>==二分图的一组匹配S是最大匹配，当且仅当图中不存在S的增广路。==</p><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><p>有了以上知识，我们可以开始看匈牙利算法的过程了：</p><ol><li>设S为空集，即所有边都是非匹配边。</li><li>寻找增广路，再把路径上所有边的匹配状态取反，得到了一个更大的匹配S’。</li></ol><p>算法的关键在于，怎么找到一条增广路。</p><p>事实上这还是挺简单的，也没啥高深思想。就是尝试给每个左部节点去找右部节点来匹配。右部节点y能与左部节点x匹配，需要满足下列条件之一：</p><ol><li>y本身就是非匹配点。此时边(x,y)本身就是一条增广路了，长度为1。</li><li>y已经和左部节点x’匹配了，但可以从x’出发找到另一个右部节点y’与之匹配。那我们就把x’和y’连上，再连x和y。这样，x-&gt;y-&gt;x’-&gt;y’就构成了一条增广路。</li></ol><p>程序方面，这里是用深度优先搜索实现的。递归地从x出发寻找增广路，如果找到了，就在回溯的同时对沿路的边进行取反。还要同时用全局vis数组来记录访问状态，避免重复搜索。</p><p>这里再推荐一个简单易懂的<a href="https://blog.csdn.net/dark_scope/article/details/8880547" target="_blank" rel="noopener">文章</a>，不清楚的同学可以再去看看。</p><p>匈牙利算法的正确性基于贪心思想，因为一旦一个点成为了匹配点，至多因为找到增广路而更换匹配对象，不会再变回非匹配点。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre><code class="c++">bool dfs(int x){    for(int e=head[x];e;e=nxt[e])    {        int y=ver[e];        if(vis[y]) continue;        if(!match[y]||dfs(match[y])) //match记录匹配点        {            match[y]=x;    //修改匹配点，递归查找增广路            return true;        }    }    return false;}int main(){    for(int i=1;i&lt;=n;i++)    {        memset(vis,0,sizeof(vis));    //每次搜完记得初始化访问状态        if(dfs(i)) ans++;    }}</code></pre><h3 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a>适用情况</h3><p>二分图匹配能适用的模型有两个要素：</p><ol><li>节点能分成两个独立的集合，每个集合内部有0条边。</li><li>每个节点只能与1条匹配边相连。</li></ol><p>同时满足以上两个要素，就该考虑使用二分图匹配了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;匹配&lt;/strong&gt;：任意两条边都没有公共端点的边的集合被称为图的一组匹配。&lt;/p&gt;
&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="-图论 -算法" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客！</title>
    <link href="http://yoursite.com/%E6%AC%A2%E8%BF%8E%E9%A1%B5/"/>
    <id>http://yoursite.com/欢迎页/</id>
    <published>2019-07-05T08:12:25.000Z</published>
    <updated>2019-09-23T06:46:01.403Z</updated>
    
    <content type="html"><![CDATA[<p>这里是ZXJ_Hans的博客，我会在这里写文（不是小说），欢迎来看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里是ZXJ_Hans的博客，我会在这里写文（不是小说），欢迎来看。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂项" scheme="http://yoursite.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="欢迎" scheme="http://yoursite.com/tags/%E6%AC%A2%E8%BF%8E/"/>
    
  </entry>
  
</feed>
