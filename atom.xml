<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hanzire&#39;s Blog</title>
  
  <subtitle>人间有味是清欢。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-23T13:04:52.074Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hanzire</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ww</title>
    <link href="http://yoursite.com/ww/"/>
    <id>http://yoursite.com/ww/</id>
    <published>2019-09-23T13:04:52.000Z</published>
    <updated>2019-09-23T13:04:52.074Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>灯泡（清华集训2015）题解</title>
    <link href="http://yoursite.com/%E7%81%AF%E6%B3%A1%EF%BC%88%E6%B8%85%E5%8D%8E%E9%9B%86%E8%AE%AD2015%EF%BC%89%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/灯泡（清华集训2015）题解/</id>
    <published>2019-09-23T08:27:55.000Z</published>
    <updated>2019-09-23T08:29:55.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>Compared to wildleopard’s wealthiness, his brother mildleopard is rather poor. His house is narrow and he has only one light bulb in his house. Every night, he is wandering in his incommodious house, thinking of how to earn more money. One day, he found that the length of his shadow was changing from time to time while walking between the light bulb and the wall of his house. A sudden thought ran through his mind and he wanted to know the maximum length of his shadow.</p><h1 id="Intput"><a href="#Intput" class="headerlink" title="Intput"></a>Intput</h1><p>The first line of the input contains an integer T (T &lt;= 100), indicating the number of cases.</p><p>Each test case contains three real numbers H, h and D in one line. H is the height of the light bulb while h is the height of mildleopard. D is distance between the light bulb and the wall. All numbers are in range from 10-2 to 103, both inclusive, and H - h &gt;= 10-2.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, output the maximum length of mildleopard’s shadow in one line, accurate up to three decimal places..</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3</p><p>2 1 0.5</p><p>2 0.5 3</p><p>4 3 4</p><p><strong>Sample Output</strong></p><p>1.000</p><p>0.750</p><p>4.000</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这道题是一道三分的经典例题，<del>但我就是不用三分</del>，我用数学。</p><p>首先影子的长度可以分为两个部分：影子有的在墙上的时候和全不在墙上的时候。<br>在第二种情况比较简单，通过相似三角形的知识可以得出一个一次函数。<br>第一种情况，仔细想想，恍然大悟，显然是一个双勾函数。</p><p>把整个房间想象成一个平面直角坐标系，设灯泡坐标为（0，H）。我们定义一个函数shadow.表示影子长度关于人坐标与灯泡的水平距离的函数。我们可以求出一个值sw，表示当影子正好处于墙角位置时，人与灯泡的水平距离，即x.</p><p>那么，怎么求影子的最大值呢？</p><p>前面已经讲了，影子的长度shadow关于x分为两段函数。sw就是其分界点，在D,H,h已知的情况下，可以轻易得出其函数解析式以及最值。最后要注意函数的定义域为[0,D].</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code class="cpp">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;using namespace std;int T;double H,h,D,sw,ans;//sw是影子刚好到墙角时，人到灯泡水平距离 //大概分为两部分：影子到了墙上和没到墙上，分两种方法计算double f(double x){    double y=-(x+D*(H-h)/x)+(D+H);//第二段函数计算    return y;}double shadow(double x)//全题最难部分：计算影子长度 x是站的位置距灯泡水平距离 {    double s;    if(x&lt;sw) s=(h*x)/(H-h);//第一段函数计算    if(x==sw) s=D-sw;    if(x&gt;sw) s=f(x);    return s;}int main(){    scanf(&quot;%d&quot;,&amp;T);    while(T--)    {        scanf(&quot;%lf%lf%lf%&quot;,&amp;H,&amp;h,&amp;D);        sw=D-(h*D/H);        double tem1,temp,tem2;        tem1=shadow(sw);        temp=sqrt(D*(H-h));//第二段函数的最值。        if(D&lt;temp) tem2=shadow(D);//规范定义域，如“勾点”在定义域外，显然这段函数是单调递增的，最大值即为shadow(D)        else tem2=shadow(temp);        ans=max(tem1,tem2);        printf(&quot;%.3f\n&quot;,ans);    }    return 0;//Retr 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h1&gt;&lt;p&gt;Compared to wildleopard’s wealthiness, his brother mildleopard is rath
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 P1135 【奇怪的电梯】</title>
    <link href="http://yoursite.com/%E9%A2%98%E8%A7%A3%20P1135%20%E3%80%90%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF%E3%80%91/"/>
    <id>http://yoursite.com/题解 P1135 【奇怪的电梯】/</id>
    <published>2019-09-23T08:25:39.000Z</published>
    <updated>2019-09-23T08:26:44.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这是一道难度较低的搜索题目，很明显可以选择BFS或DFS来做，我用的是dfs;</p><p>先从a层开始搜索，我们把去过的每一层都进行标记，以免重复。对于每一层，我们可以选择向上还是向下走，如果越界或是能去的楼层已经标记，就不去了。假如已经到了目标楼层b，就用res尝试更新答案。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;cstdio&gt;using namespace std;const int N = 250;const int inf = 0x3f3f3f3f;int n, a, b, ans = inf, num[N];bool vis[N];void dfs(int k, int res){    if (k == b)    {        ans = min(ans, res);        return;    }    if (res &lt; ans)    {        vis[k] = true;        if (k + num[k] &lt;= n &amp;&amp; !vis[k + num[k]])            dfs(k + num[k], res + 1);        if (k - num[k] &gt;= 1 &amp;&amp; !vis[k - num[k]])            dfs(k - num[k], res + 1);        // 如果向上或向下不越界，且相应层数没有访问过，则往该方向搜索；        vis[k] = false;        // 回溯；    }}int main(){    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;a, &amp;b);    for (int i = 1; i &lt;= n; i++)        scanf(&quot;%d&quot;, &amp;num[i]);    vis[a] = true;    dfs(a, 0);    if (ans &lt; inf)        printf(&quot;%d&quot;, ans);    else        printf(&quot;-1&quot;);    // 无解时，不会更新答案，ans=inf ，输出-1；    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;这是一道难度较低的搜索题目，很明显可以选择BFS或DFS来做，我用的是dfs;&lt;/p&gt;
&lt;p&gt;先从a层开始搜索，我们把去过的每一层都进行标记
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 P3942 【将军令】</title>
    <link href="http://yoursite.com/%E9%A2%98%E8%A7%A3%20P3942%20%E3%80%90%E5%B0%86%E5%86%9B%E4%BB%A4%E3%80%91/"/>
    <id>http://yoursite.com/题解 P3942 【将军令】/</id>
    <published>2019-09-23T08:01:50.000Z</published>
    <updated>2019-09-23T08:03:02.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><h3 id="思路：贪心"><a href="#思路：贪心" class="headerlink" title="思路：贪心"></a>思路：贪心</h3><p>看了许多大佬的题解，都没有很详细的理论分析，所以我结合网上的写了理论证明。</p><p>在看做法之前，我们先明白两个引理。</p><p><strong>引理 1</strong>：在以 Pk 为根的子树中，至少要选择一个结点带小队。 </p><p>因为 P 距小队的距离不能超过 k，而所有与 P 距离不超过 k 的结点都在以 Pk 为根的子树，所以引理 1 成立。</p><p>现在我们知道了一棵子树中至少有一个小队，进一步，我们需要找到在哪个结点安排小队。</p><p><strong>引理 2</strong>：在 Pk 结点上安排小队不会比在其子孙结点上安排小队差。 </p><p>如果一个结点 A 与一个有小队的结点距离不超过 k，我们称 A 被 B 覆盖。我们知道， P 是整棵树深度最大的结点,它也是以 Pk 为根的子树中深度最大的结点。这样，在 Pk 放小队，整棵子树中的结点都被 Pk 覆盖。设我们在 Q 建立一个小队，它在 Pk 的 子树中不可能比 Pk 覆盖更多的结点，考虑 Pk 子树外的一个结点 R，Q 与 R 的最短路径必然经过 Pk，因此 Pk 到 R 的距离不会比 Q 到 R 的距离远。这样 Pk 在子树外能覆盖的结点不会 比 Q 在子树外部覆盖的结点少。因此，总体来说，选 Pk 都不会比选 Q 差。 这样，从最优的决策出发，我们必然要选择 Pk 建立安排小队。</p><p>好了，既然已经证明了就好办了。</p><p>把节点按深度存，先从最深的开始，找没小队且存在的最高的父亲，再dfs染上色。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="cpp">#include &quot;iostream&quot;#include &quot;cstdio&quot;#include &quot;cstring&quot;#include &quot;queue&quot;#include &quot;vector&quot;using namespace std;const int N = 1e5 + 5;int n, k, t, tot, maxdep = -1, ans;int head[N], ver[N * 2], nxt[N * 2], fa[N], dep[N];vector&lt;int&gt; deep[N];bool color[N], is[N];inline int get(){    int res = 0;    char c = getchar();    while (c &lt; &#39;0&#39; || c &gt; &#39;9&#39;)        c = getchar();    while (c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;)    {        res = res * 10 + c - &#39;0&#39;;        c = getchar();    }    return res;}inline void add(int x, int y){    ver[++tot] = y;    nxt[tot] = head[x];    head[x] = tot;}void dfs(int u, int f){    fa[u] = f;    dep[u] = dep[f] + 1;    deep[dep[u]].push_back(u);    maxdep = max(maxdep, dep[u]);    for (int e = head[u]; e; e = nxt[e])    {        int v = ver[e];        if (v == f)            continue;        dfs(v, u);    }}void paint(int x, int s, int f, int al){    color[x] = true;    if (al == s)        return;    for (int e = head[x]; e; e = nxt[e])    {        int v = ver[e];        if (v == f)            continue;        paint(v, s, x, al + 1);    }}inline void solve(){    int father;    for (int i = maxdep; i &gt;= 1; i--)        for (int j = 0; j &lt; deep[i].size(); j++)        {            father = deep[i][j];            if (color[father] == true)                continue;            for (int j = k; j &gt;= 1; j--)            {                for (int p = 1; p &lt;= j; p++)                    father = fa[father];                if (father &lt;= 0 || is[father])                    continue;                paint(father, k, 0, 0);                is[father] = 1;                break;            }        }}int main(){    freopen(&quot;testdata.in&quot;, &quot;r&quot;, stdin);    freopen(&quot;test.out&quot;, &quot;w&quot;, stdout);    n = get(), k = get(), t = get();    int x, y;    if (k == 0)    {        printf(&quot;%d&quot;, n);        return 0;    }    for (int i = 1; i &lt; n; i++)    {        x = get(), y = get();        add(x, y), add(y, x);    }    dfs(1, 0);    solve();    for (int i = 1; i &lt;= n; i++)    {        if (is[i])            ans++;    }    if (!color[1])        ans++;    printf(&quot;%d&quot;, ans);    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法分析&quot;&gt;&lt;a href=&quot;#算法分析&quot; class=&quot;headerlink&quot; title=&quot;算法分析&quot;&gt;&lt;/a&gt;算法分析&lt;/h2&gt;&lt;h3 id=&quot;思路：贪心&quot;&gt;&lt;a href=&quot;#思路：贪心&quot; class=&quot;headerlink&quot; title=&quot;思路：贪心&quot;&gt;
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 P1828 【香甜的黄油 Sweet Butter】</title>
    <link href="http://yoursite.com/%E9%A2%98%E8%A7%A3%20P1828%20%E3%80%90%E9%A6%99%E7%94%9C%E7%9A%84%E9%BB%84%E6%B2%B9%20Sweet%20Butter%E3%80%91/"/>
    <id>http://yoursite.com/题解 P1828 【香甜的黄油 Sweet Butter】/</id>
    <published>2019-09-23T07:58:56.000Z</published>
    <updated>2019-09-23T08:00:11.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SPFA最短路无STL"><a href="#SPFA最短路无STL" class="headerlink" title="SPFA最短路无STL"></a>SPFA最短路无STL</h1><p>本蒟蒻看楼上一群大佬用STL写SPFA，就想着用普通的SPFA写一篇题解。<br>看题目也知道，如果只是朴素的FLOYED肯定是会超时的，所以这里考虑使用最快的SPFA算法。<br>话不多说，上代码~~</p><pre><code class="cpp">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std；int n,p,c,i,j,x,y,t,min1,head,tail,tot,u;inta[801][801],b[501],dis[801],num[801],w[801][801],team[1601];bool exist[801];int main(){    cin&gt;&gt;n&gt;&gt;p&gt;&gt;c;    for(i=1;i&lt;=p;i++)        for(j=1;j&lt;=p;j++)            w[i][j]=0x7fffffff/3;  //初始化    for(i=1;i&lt;=n;i++)        cin&gt;&gt;b[i];    for(i=1;i&lt;=c;i++)     //邻接矩阵存储    {        cin&gt;&gt;x&gt;&gt;y&gt;&gt;t;        w[x][y]=w[y][x]=t;  //双向        a[x][++num[x]]=y;   //存储于每个牧场相连的牧场序号        a[y][++num[y]]=x;    }    min1=0x7fffffff/3;    for(i=1;i&lt;=p;i++)    {        for(j=1;j&lt;=p;j++) dis[j]=0x7fffffff/3;memset(team,0,sizeof(team)); //队列数组初始化memset(exist,false,sizeof(exist)); //标记数组初始化dis[i]=0;team[1]=i;head=0;tail=1;exist[i]=true; //起始点入队        do        {            head++;            head=((head-1)%1601)+1;   //循环队列，有效节约空间            u=team[head];            exist[u]=false;            for(j=1;j&lt;=num[u];j++)//循环判断每一个与头相连的点                if(dis[a[u][j]]&gt;dis[u]+w[u][a[u][j]])                {                    dis[a[u][j]]=dis[u]+w[u][a[u][j]];                    if(!exist[a[u][j]])  //入队操作                    {                        tail++;                        tail=((tail-1)%1601)+1;                        team[tail]=a[u][j];                        exist[a[u][j]]=true;                    }                }        }while(head!=tail);        tot=0;        for(j=1;j&lt;=n;j++)        tot+=dis[b[j]];        if(tot&lt;min1) min1=tot;    }    cout&lt;&lt;min1;    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SPFA最短路无STL&quot;&gt;&lt;a href=&quot;#SPFA最短路无STL&quot; class=&quot;headerlink&quot; title=&quot;SPFA最短路无STL&quot;&gt;&lt;/a&gt;SPFA最短路无STL&lt;/h1&gt;&lt;p&gt;本蒟蒻看楼上一群大佬用STL写SPFA，就想着用普通的SPFA写一篇
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 P1201 【[USACO1.1]贪婪的送礼者Greedy Gift Givers】</title>
    <link href="http://yoursite.com/%E9%A2%98%E8%A7%A3%20P1201%20%E3%80%90%5BUSACO1.1%5D%E8%B4%AA%E5%A9%AA%E7%9A%84%E9%80%81%E7%A4%BC%E8%80%85Greedy%20Gift%20Givers%E3%80%91/"/>
    <id>http://yoursite.com/题解 P1201 【[USACO1.1]贪婪的送礼者Greedy Gift Givers】/</id>
    <published>2019-09-23T07:57:35.000Z</published>
    <updated>2019-09-23T08:01:15.004Z</updated>
    
    <content type="html"><![CDATA[<p>简单题就是要有简单题的亚子</p><p>数据十分小，可以暴力。</p><p>先开结构体存下每个人的名字，收入和支出，按顺序读入。</p><p>输入送礼名单时，遍历一遍，匹配名字，加上平均数。</p><p>最后按顺序输出每个人的收入-支出</p><p>详细见代码。</p><pre><code class="cpp">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;string&gt;using namespace std;int n,x,y;string b;struct node{    string name;    int in,out;} a[13];int main(){    scanf(&quot;%d&quot;,&amp;n);    for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i].name;    for(int i=1;i&lt;=n;i++)    {        cin&gt;&gt;b;        scanf(&quot;%d%d&quot;,&amp;x,&amp;y);        if(y==0) continue;              //除数不能为0        for(int j=1;j&lt;=n;j++)            if(a[j].name==b)           //string就是方便                a[j].out+=(x/y)*y;      //平均送礼        for(int j=1;j&lt;=y;j++)        {            cin&gt;&gt;b;            for(int k=1;k&lt;=n;k++)                if(a[k].name==b)                    a[k].in+=x/y;       //到账        }    }    for(int i=1;i&lt;=n;i++)        cout&lt;&lt;a[i].name&lt;&lt;&quot; &quot;&lt;&lt;a[i].in-a[i].out&lt;&lt;endl;    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单题就是要有简单题的亚子&lt;/p&gt;
&lt;p&gt;数据十分小，可以暴力。&lt;/p&gt;
&lt;p&gt;先开结构体存下每个人的名字，收入和支出，按顺序读入。&lt;/p&gt;
&lt;p&gt;输入送礼名单时，遍历一遍，匹配名字，加上平均数。&lt;/p&gt;
&lt;p&gt;最后按顺序输出每个人的收入-支出&lt;/p&gt;
&lt;p&gt;详细见代码。&lt;
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解P3941【入阵曲】</title>
    <link href="http://yoursite.com/%E9%A2%98%E8%A7%A3P3941%E3%80%90%E5%85%A5%E9%98%B5%E6%9B%B2%E3%80%91/"/>
    <id>http://yoursite.com/题解P3941【入阵曲】/</id>
    <published>2019-09-23T06:40:13.000Z</published>
    <updated>2019-09-23T06:47:39.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="60分做法：暴力-前缀和"><a href="#60分做法：暴力-前缀和" class="headerlink" title="60分做法：暴力+前缀和"></a>60分做法：暴力+前缀和</h3><p>使用前缀和存储 <code>sum[i][j]</code> 存储<code>(i,j)</code>点作为右下角<code>(1,1)</code>作左上角的矩阵和。可以枚举每个矩阵大小。复杂度$O(n^4)$</p><h3 id="100分做法：找规律-小暴力"><a href="#100分做法：找规律-小暴力" class="headerlink" title="100分做法：找规律+小暴力"></a>100分做法：找规律+小暴力</h3><p>先看样例：</p><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">1</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">1</td><td align="center">2</td></tr></tbody></table><p>我们可以尝试枚举行之间的分割线，<code>(i,j)</code>代i为上界，以j为下界的矩阵。对这样一个矩阵进行压行处理。就是把每一列的数字都加起来，得到：</p><table><thead><tr><th align="center">3</th><th align="center">3</th><th align="center">3</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>这样一个序列。我们用一个数组<code>f</code>存储它的前缀和，再用<code>mod</code>数组存储它模k的数。我们设<code>f[i],f[j]</code>，且<code>i&lt;j</code>。假如，<code>mod[f[i]]==mod[f[j]]</code>那么就代表区间<code>(i,j)</code>的和%k==0。因为<code>mod[f[i]]</code>区间<code>(i,j)</code>没有对余数做出改变。</p><p>所以，我们应该使用一个桶，<code>cnt[i]</code>代表此前模k=i的前缀和个数，再出现一个模k=i的前缀和时，我们先在答案加上<code>cnt[i]</code>再<code>cnt[i]++</code>。时间复杂度：$O(n^3)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="c++">#include &quot;iostream&quot;#include &quot;cstdio&quot;#include &quot;algorithm&quot;#define ll long longusing namespace std;const int N = 405;const int M = 1000005;int n, m, k, a[N][N];ll ans, sum[N][N], mod[M], cnt[M], f[N];inline int get(){    int res = 0, sign = 1;    char c = getchar();    while (c &lt; &#39;0&#39; || c &gt; &#39;9&#39;)    {        if (c == &#39;-&#39;)            sign = -1;        c = getchar();    }    while (c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;)    {        res = res * 10 + c - &#39;0&#39;;        c = getchar();    }    return res * sign;}int main(int argc, char const *argv[]){    n = get(), m = get(), k = get();    for (int i = 1; i &lt;= n; i++)        for (int j = 1; j &lt;= m; j++)        {            a[i][j] = get();            sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + a[i][j];        }    for (int i = 0; i &lt; n; i++)        for (int j = i + 1; j &lt;= n; j++)        {            cnt[0] = 1;            for (int p = 1; p &lt;= m; p++)            {                f[p] = (sum[j][p] - sum[i][p]) % k;                ans += cnt[f[p]];                cnt[f[p]]++;            }            for (int p = 1; p &lt;= m; p++)                cnt[f[p]] = 0;        }    cout &lt;&lt; ans &lt;&lt; endl;    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;h3 id=&quot;60分做法：暴力-前缀和&quot;&gt;&lt;a href=&quot;#60分做法：暴力-前缀和&quot; class=&quot;headerlink&quot; title=&quot;6
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 P1196 【[NOI2002]银河英雄传说】</title>
    <link href="http://yoursite.com/%E9%A2%98%E8%A7%A3%20P1196%20%E3%80%90%5BNOI2002%5D%E9%93%B6%E6%B2%B3%E8%8B%B1%E9%9B%84%E4%BC%A0%E8%AF%B4%E3%80%91/"/>
    <id>http://yoursite.com/题解 P1196 【[NOI2002]银河英雄传说】/</id>
    <published>2019-09-21T06:50:17.000Z</published>
    <updated>2019-09-23T06:44:02.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法：带权并查集"><a href="#算法：带权并查集" class="headerlink" title="算法：带权并查集"></a>算法：带权并查集</h2><p>这道题有两种算法，但主要思想都是并查集，区别在于是否有路径压缩。</p><h4 id="1-不带路径压缩"><a href="#1-不带路径压缩" class="headerlink" title="1. 不带路径压缩"></a>1. 不带路径压缩</h4><p>  此时fa[x]就表示排在第x号战舰前面的那个战舰的编号。集合的“代表”就是最前面的战舰的编号。<br>  让树上每条边带上权值1，这样树上两点之间的距离-1就是二者相隔的战舰数量。<br>  注意，这样写的话在find函数中就不能加上路径压缩的优化。</p><h4 id="2-带路径压缩"><a href="#2-带路径压缩" class="headerlink" title="2.带路径压缩"></a>2.带路径压缩</h4><p>  在考虑路径压缩时，我们应该在建立一个数组d，d[x]记录战舰x与fa[x]之间的边的权值。<br>  我们知道，在路径压缩时，会把x指向此时的树根。我们应该对find函数做一些修改，把d[x]更新为从x到树根的路径上的所有边权之和。</p><pre><code class="cpp">inline int find(int x){    if(x==f[x]) return x;    int root=find(f[x]);    d[x]+=d[f[x]];    return f[x]=root;}</code></pre><p>  当接收到Cxy指令时，分别执行find(x),find(y)完成查询和路径压缩。如果两者的返回值相同，则说明x,y在同一列之中。<br>  那么，d[x]和d[y]都指向了共同的树根，分别表示在x，y之前的战舰数量。二者之差再减1就是x和y之间间隔的战舰数量。<br>  当接收到Mxy指令时，把x的树根作为y的树根的子节点，连接的新边的权值应给设为合并之前集合y的大小。（因为y集合全部排在x之前）<br>  因此还需要增加一个size数组记录每个集合的大小。</p><pre><code class="cpp">void merge(int x,int y){    x=find(x);y=find(y);    f[x]=y;d[x]=size[y];    size[y]+=size[x];}</code></pre><p>下面是完整代码</p><pre><code class="cpp">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;using namespace std;const int N=30000;int t,f[N+5],d[N+5],size[N+5];inline int find(int x){    if(x==f[x]) return x;    int root=find(f[x]);    d[x]+=d[f[x]];    return f[x]=root;}void merge(int x,int y){    x=find(x);y=find(y);    f[x]=y;d[x]=size[y];    size[y]+=size[x];}int main(){    cin&gt;&gt;t;    char o;int i,j;    for(int i=1;i&lt;=N;i++)    {        f[i]=i;        d[i]=0;        size[i]=1;    }    while(t--)    {        cin&gt;&gt;o&gt;&gt;i&gt;&gt;j;        if(o==&#39;M&#39;) merge(i,j);        if(o==&#39;C&#39;)        {            int x=find(i),y=find(j);            if(x!=y)            {                cout&lt;&lt;&quot;-1&quot;&lt;&lt;endl;                continue;            }            else            {                int q=abs(d[i]-d[j])-1;                cout&lt;&lt;q&lt;&lt;endl;            }        }    }    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法：带权并查集&quot;&gt;&lt;a href=&quot;#算法：带权并查集&quot; class=&quot;headerlink&quot; title=&quot;算法：带权并查集&quot;&gt;&lt;/a&gt;算法：带权并查集&lt;/h2&gt;&lt;p&gt;这道题有两种算法，但主要思想都是并查集，区别在于是否有路径压缩。&lt;/p&gt;
&lt;h4 id=&quot;1
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 luogu P1455 【搭配购买】</title>
    <link href="http://yoursite.com/%E9%A2%98%E8%A7%A3%20P1455%20%E3%80%90%E6%90%AD%E9%85%8D%E8%B4%AD%E4%B9%B0%E3%80%91/"/>
    <id>http://yoursite.com/题解 P1455 【搭配购买】/</id>
    <published>2019-08-26T11:53:49.000Z</published>
    <updated>2019-09-23T06:45:05.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h2><p>​    正解十分简单。所有互相有关联的云可以视作捆绑销售，使用并查集合在一起，得到若干个由原来的物品组成的新物品，最后跑01背包即可。</p><pre><code class="c++">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;const int N=10005;int n,m,w,val[N],wor[N],f[N],fa[N];int p[N],v[N],id[N],tot;bool vis[N];inline int get(){    int res=0;char c=getchar();    while(c&lt;&#39;0&#39;||c&gt;&#39;9&#39;) c=getchar();    while(c&gt;=&#39;0&#39;&amp;&amp;c&lt;=&#39;9&#39;)    {        res=res*10+c-&#39;0&#39;;        c=getchar();    }    return res;}int find(int x){    if(x==fa[x]) return x;    else return fa[x]=find(fa[x]);}int main(){    n=get(),m=get(),w=get();    for(int i=1;i&lt;=n;i++)        wor[i]=get(),val[i]=get();    for(int i=1;i&lt;=n;i++) fa[i]=i;    int x,y,fi;    for(int i=1;i&lt;=m;i++)    {        x=get(),y=get();        int fx=find(x),fy=find(y);        if(fx!=fy) fa[fx]=fy;    }    for(int i=1;i&lt;=n;i++)    {        fi=find(i);        if(!vis[fi])        {            tot++;            id[fi]=tot;            v[tot]+=val[i];            p[tot]+=wor[i];            vis[fi]=true;        }        else        {            v[id[fi]]+=val[i];            p[id[fi]]+=wor[i];        }    }    for(int i=1;i&lt;=tot;i++)        for(int j=w;j&gt;=p[i];j--)            f[j]=max(f[j],f[j-p[i]]+v[i]);    int ans=0;    for(int i=0;i&lt;=w;i++) ans=max(ans,f[i]);    printf(&quot;%d&quot;,ans);    return 0;}</code></pre><h2 id="来个复杂点的解法"><a href="#来个复杂点的解法" class="headerlink" title="来个复杂点的解法"></a>来个复杂点的解法</h2><p>思路：Tarjan缩点+01背包</p><p>我知道并查集就可以惹qwq，但不知为何写了个tarjan</p><p>反正思路很简单，tarjan缩点，缩出来的点就是有关系的点揉在一起的，再在新点上进行01背包。</p><pre><code class="c++">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#define ll long longusing namespace std;const int N=1e4+100;int c[N],d[N],cost[N],val[N];int next[N],head[N],go[N],tot;inline void add(int u,int v){    next[++tot]=head[u];head[u]=tot;go[tot]=v;    next[++tot]=head[v];head[v]=tot;go[tot]=u;}int dfn[N],st[N],low[N],co[N],col,num,top;int Tarjan(int u){    dfn[u]=low[u]=++num;    st[++top]=u;    for(int i=head[u],v;i;i=next[i]){        v=go[i];        if(!dfn[v]){            Tarjan(v);            low[u]=min(low[u],low[v]);        }else if(!co[v]){            low[u]=min(low[u],dfn[v]);        }    }    if(low[u]==dfn[u]){        co[u]=++col;        cost[col]+=c[u];        val[col]+=d[u];        while(st[top]!=u){            cost[col]+=c[st[top]];            val[col]+=d[st[top]];            co[st[top]]=col;            --top;        }        --top;    }}int f[2][N];int main(){    freopen(&quot;buy.in&quot;,&quot;r&quot;,stdin);    freopen(&quot;buy.out&quot;,&quot;w&quot;,stdout);    int n,m,w;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;w;    for(int i=1;i&lt;=n;i++)    scanf(&quot;%d%d&quot;,&amp;c[i],&amp;d[i]);    for(int i=1,u,v;i&lt;=m;i++){        scanf(&quot;%d%d&quot;,&amp;u,&amp;v);        add(u,v);    }    for(int i=1;i&lt;=n;i++)    if(!dfn[i])Tarjan(i);    memset(f,0xcf,sizeof(f));    f[0][0]=0;    for(int i=1;i&lt;=col;i++){        for(int j=0;j&lt;=w;j++)        f[i&amp;1][j]=f[(i-1)&amp;1][j];        for(int j=cost[i];j&lt;=w;j++)        f[i&amp;1][j]=max(f[(i-1)&amp;1][j],f[(i-1)&amp;1][j-cost[i]]+val[i]);    }    int ans=0;    for(int j=0;j&lt;=w;j++)    ans=max(ans,f[col&amp;1][j]);    cout&lt;&lt;ans&lt;&lt;endl;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正解&quot;&gt;&lt;a href=&quot;#正解&quot; class=&quot;headerlink&quot; title=&quot;正解&quot;&gt;&lt;/a&gt;正解&lt;/h2&gt;&lt;p&gt;​    正解十分简单。所有互相有关联的云可以视作捆绑销售，使用并查集合在一起，得到若干个由原来的物品组成的新物品，最后跑01背包即可。&lt;/
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF475B 【Strongly Connected City】</title>
    <link href="http://yoursite.com/%E9%A2%98%E8%A7%A3%20CF475B%20%E3%80%90Strongly%20Connected%20City%E3%80%91/"/>
    <id>http://yoursite.com/题解 CF475B 【Strongly Connected City】/</id>
    <published>2019-08-26T11:18:37.000Z</published>
    <updated>2019-09-23T06:44:13.747Z</updated>
    
    <content type="html"><![CDATA[<p>​    其实只要稍加思考便可以发现一个这张图的一个特性：<strong>只要边缘的四个点是相连通的，整张图就是联通的</strong></p><p>​    根据题意，可以发现，图中的任何一个节点，都可以通过在边缘的四条边中的某个点直接抵达（一溜就到了）。</p><p>​    如果四个顶点相连通，就代表四条边缘的边上的点都可以通过顶点到达，而中间的点只要顺着所处的边的方向走一点可以到边缘，所以所有点都可以到所有点。</p><p>​    相反的，如果有四角上的顶点从相邻的四角上的顶点无法到达，也就意味着所有点都到不了这个顶点（因为只有两条边连着外面）。</p><p>​    因此只要判断四个顶点上的边方向看是否联通即可。</p><pre><code class="c++">#include &lt;iostream&gt;#include &quot;cstdio&quot;#include &quot;cstring&quot;using namespace std;int n, m, din[22], dim[22];bool ans = true;string a, b;int main(int argc, char const *argv[]){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    cin&gt;&gt;a&gt;&gt;b;    for (int i = 0; i &lt; n; i++)        if (a[i]==&#39;&gt;&#39;) din[i+1] = 1;    for (int i = 0; i &lt; m; i++)        if (b[i]==&#39;^&#39;) dim[i+1] = 1;    if (din[1] != dim[1]) ans = false;    if (din[1] == dim[m]) ans = false;    if (din[n] == dim[1]) ans = false;    if (din[n] != dim[m]) ans = false;    if (ans) cout&lt;&lt;&quot;YES&quot;;    else cout&lt;&lt;&quot;NO&quot;;    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    其实只要稍加思考便可以发现一个这张图的一个特性：&lt;strong&gt;只要边缘的四个点是相连通的，整张图就是联通的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    根据题意，可以发现，图中的任何一个节点，都可以通过在边缘的四条边中的某个点直接抵达（一溜就到了）。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="题解" scheme="http://yoursite.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>二分图最大匹配</title>
    <link href="http://yoursite.com/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/匈牙利算法/</id>
    <published>2019-07-07T01:59:04.000Z</published>
    <updated>2019-09-23T07:44:20.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ul><li><p><strong>匹配</strong>：任意两条边都没有公共端点的边的集合被称为图的一组匹配。</p></li><li><p><strong>最大匹配</strong>：在二分图中，包含边数最多的一组匹配。</p></li><li><p><strong>匹配边与非匹配边</strong>：对于任意一组匹配S，属于S的边被称为匹配边，不属于S的被称为非匹配边。</p></li><li><p><strong>匹配点与非匹配点</strong>：匹配边的端点被称为匹配点，非匹配边的端点被称为非匹配点。</p></li><li><p><strong>增广路</strong>：连结两个非匹配点的路径，使得非匹配边与匹配边交替出现。</p></li><li><p><strong>完备匹配</strong>:给定一张二分图，其左部、右部端点数量都为N，如果该二分图的最大匹配包含N条匹配边，则称该二分图具有完备匹配。</p><p>接下来我们看几张图来帮助理解。</p><p><img src="https://img.renfei.org/2013/08/2.png" alt></p></li></ul><p>如图2，这是一个二分图。</p><p><img src="https://img.renfei.org/2013/08/3.png" alt></p><p>如图3，所有红色的边就是该二分图的一组<strong>匹配</strong>。很显然，两条红色的边都没有公共端点。</p><p><img src="https://img.renfei.org/2013/08/4.png" alt></p><p>再看图4，此时所有红色的边组成的也是一组匹配，而且是<strong>最大匹配</strong>，甚至还是<strong>完备匹配</strong>。因为匹配边的数量不能再多了，而且匹配边的数量和左右部端点数相同。</p><p><img src="https://img.renfei.org/2013/08/5.png" alt></p><p>如图5，又是一张二分图，红色边的是一组匹配，红色的点就是匹配点了。</p><p><img src="https://img.renfei.org/2013/08/6.png" alt></p><p>如图6，就是图5的一条增广路了，可以看到，第一个端点和最后一个端点都是非匹配点，途中经过的边是非匹配边，匹配边的方式交替的。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>关于二分图匹配的问题，最常见的应该就是求二分图的最大匹配了吧。。。</p><p>举个例子，看这张图：</p><p><img src="https://img.renfei.org/2013/08/0.png" alt></p><p>图中男女可以凑成一对的被连上了边，那我们要尽可能的促成他人的爱情，抽象出来，也就是求二分图最大匹配了。</p><p>（虽然我觉得这样的人际关系很渣，但没办法它是服务于学术的呢。。。）</p><p><img src="https://ae01.alicdn.com/kf/HTB1m7sRXbr1gK0jSZFDq6z9yVXaR.jpg" alt></p><p>为了解决这么一个<del>渣男渣女</del>问题，我们需要用到一个和这个问题一样让人感觉不太舒服的算法（笑。</p><h1 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h1><p><strong>匈牙利算法</strong>，又称<strong>增广路算法</strong>，顾名思义，运用到了增广路的性质，这里就对增广路的一些性质进行补充。</p><h3 id="增广路的性质（建议结合上面增广路的定义看）"><a href="#增广路的性质（建议结合上面增广路的定义看）" class="headerlink" title="增广路的性质（建议结合上面增广路的定义看）"></a>增广路的性质（建议结合上面增广路的定义看）</h3><ul><li>长度为奇数，这是显然的，因为是交替的嘛。</li><li>路径上第奇数号的边是非匹配边，偶数号的是匹配边。</li></ul><p>看到以上性质，你有没有明白些什么？？</p><p>没有，好，那就容我BB两句。<del>有我也要BB</del></p><p>如果我们把增广路上的每条边状态取反，就能得到一个新匹配S’，而且比原来的匹配S大了1！</p><p>进一步我们可以得到推论：</p><p>==二分图的一组匹配S是最大匹配，当且仅当图中不存在S的增广路。==</p><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><p>有了以上知识，我们可以开始看匈牙利算法的过程了：</p><ol><li>设S为空集，即所有边都是非匹配边。</li><li>寻找增广路，再把路径上所有边的匹配状态取反，得到了一个更大的匹配S’。</li></ol><p>算法的关键在于，怎么找到一条增广路。</p><p>事实上这还是挺简单的，也没啥高深思想。就是尝试给每个左部节点去找右部节点来匹配。右部节点y能与左部节点x匹配，需要满足下列条件之一：</p><ol><li>y本身就是非匹配点。此时边(x,y)本身就是一条增广路了，长度为1。</li><li>y已经和左部节点x’匹配了，但可以从x’出发找到另一个右部节点y’与之匹配。那我们就把x’和y’连上，再连x和y。这样，x-&gt;y-&gt;x’-&gt;y’就构成了一条增广路。</li></ol><p>程序方面，这里是用深度优先搜索实现的。递归地从x出发寻找增广路，如果找到了，就在回溯的同时对沿路的边进行取反。还要同时用全局vis数组来记录访问状态，避免重复搜索。</p><p>这里再推荐一个简单易懂的<a href="https://blog.csdn.net/dark_scope/article/details/8880547" target="_blank" rel="noopener">文章</a>，不清楚的同学可以再去看看。</p><p>匈牙利算法的正确性基于贪心思想，因为一旦一个点成为了匹配点，至多因为找到增广路而更换匹配对象，不会再变回非匹配点。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre><code class="c++">bool dfs(int x){    for(int e=head[x];e;e=nxt[e])    {        int y=ver[e];        if(vis[y]) continue;        if(!match[y]||dfs(match[y])) //match记录匹配点        {            match[y]=x;    //修改匹配点，递归查找增广路            return true;        }    }    return false;}int main(){    for(int i=1;i&lt;=n;i++)    {        memset(vis,0,sizeof(vis));    //每次搜完记得初始化访问状态        if(dfs(i)) ans++;    }}</code></pre><h3 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a>适用情况</h3><p>二分图匹配能适用的模型有两个要素：</p><ol><li>节点能分成两个独立的集合，每个集合内部有0条边。</li><li>每个节点只能与1条匹配边相连。</li></ol><p>同时满足以上两个要素，就该考虑使用二分图匹配了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;匹配&lt;/strong&gt;：任意两条边都没有公共端点的边的集合被称为图的一组匹配。&lt;/p&gt;
&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="信息竞赛" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客！</title>
    <link href="http://yoursite.com/%E6%AC%A2%E8%BF%8E%E9%A1%B5/"/>
    <id>http://yoursite.com/欢迎页/</id>
    <published>2019-07-05T08:12:25.000Z</published>
    <updated>2019-09-23T10:36:17.169Z</updated>
    
    <content type="html"><![CDATA[<p>这里是ZXJ_Hans的博客，我会在这里写文（不是小说），欢迎来看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里是ZXJ_Hans的博客，我会在这里写文（不是小说），欢迎来看。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂项" scheme="http://yoursite.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="欢迎" scheme="http://yoursite.com/tags/%E6%AC%A2%E8%BF%8E/"/>
    
  </entry>
  
</feed>
